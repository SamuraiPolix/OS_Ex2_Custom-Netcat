        -:    0:Source:mync.cpp
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:8
        -:    1:#include <cstdio>
        -:    2:#include <unistd.h>
        -:    3:#include <cstring>
        -:    4:
        -:    5:#define MAX_ARGS_SIZE 256
        -:    6:
        8:    7:int main(int argc, char* argv[]) {
        -:    8:    // If not enough argc or argv[1] not -e
        8:    9:    if (argc < 3 || strcmp(argv[1], "-e") != 0) {
        1:   10:        printf("Usage: %s -e \"<program> <arguments>\" \n", argv[0]);
        1:   11:        return 1;
        -:   12:    }
        -:   13:
        7:   14:    char *p = argv[2];  // a pointer used to extract the command and arguments from argv
        7:   15:    printf("argv[2]: %s\n", p); // print the command and arguments (for debugging purposes
        -:   16:    char *args[MAX_ARGS_SIZE];      // store pointers to the command and arguments
        7:   17:    int i = 0;      // index for args
        -:   18:    
        -:   19:    // skip leading spaces
        9:   20:    while (*p == ' ') {
        2:   21:        p++;
        -:   22:    }
        -:   23:    
        -:   24:    // we are at the start of the command to execute - place args[0] pointer here, increment i
        7:   25:    args[i++] = p;
        -:   26:    
        -:   27:    // skip spaces and make sure we are not going off
       81:   28:    while (*p != ' ' && *p != '\0') {
       74:   29:        p++;
        -:   30:    }
        -:   31:
        7:   32:    *p = '\0';  // null-terminate the program name
        -:   33:
        7:   34:    p++;    // move to the next character
        -:   35:
        -:   36:    // extract the arguments
       16:   37:    while (*p != '\0') {
        -:   38:        // skip leading spaces
       14:   39:        while (*p == ' ') {
        4:   40:            p++;
        -:   41:        }
        -:   42:
        -:   43:        // if we reach the end, break
       10:   44:        if (*p == '\0') {
        1:   45:            break;
        -:   46:        }
        -:   47:
        -:   48:        // p is now placed at the start of the argument - place args[i] pointer here, increment i
        9:   49:        args[i++] = p;
        -:   50:
        -:   51:        // go until the end of the argument
       91:   52:        while (*p != ' ' && *p != '\0') {
       82:   53:            p++;
        -:   54:        }
        -:   55:
        9:   56:        if (*p != '\0') {   // if we are not at the end
        3:   57:            *p = '\0';  // null-terminate the argument
        3:   58:            p++;    // move to the next character
        -:   59:        }
        -:   60:        // else, we are at the end of the command - the loop will break
        -:   61:    }
        -:   62:
        7:   63:    args[i] = NULL; // null-terminate the arguments list, for execvp to work
        -:   64:
        -:   65:    // execute command
        7:   66:    execvp(args[0], args);
        -:   67:
        -:   68:    // if execvp returns (this thread didnt die), there was an error
        7:   69:    perror("execvp");
        2:   70:    return 1;
        -:   71:}
